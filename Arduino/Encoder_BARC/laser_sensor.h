// Generated by gencpp from file barc/laser_sensor.msg
// DO NOT EDIT!


#ifndef BARC_MESSAGE_LASER_SENSOR_H
#define BARC_MESSAGE_LASER_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace barc
{
template <class ContainerAllocator>
struct laser_sensor_
{
  typedef laser_sensor_<ContainerAllocator> Type;

  laser_sensor_()
    : XL(0.0)
    , YL(0.0)
    , XR(0.0)
    , YR(0.0)  {
    }
  laser_sensor_(const ContainerAllocator& _alloc)
    : XL(0.0)
    , YL(0.0)
    , XR(0.0)
    , YR(0.0)  {
  (void)_alloc;
    }



   typedef float _XL_type;
  _XL_type XL;

   typedef float _YL_type;
  _YL_type YL;

   typedef float _XR_type;
  _XR_type XR;

   typedef float _YR_type;
  _YR_type YR;




  typedef boost::shared_ptr< ::barc::laser_sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::barc::laser_sensor_<ContainerAllocator> const> ConstPtr;

}; // struct laser_sensor_

typedef ::barc::laser_sensor_<std::allocator<void> > laser_sensor;

typedef boost::shared_ptr< ::barc::laser_sensor > laser_sensorPtr;
typedef boost::shared_ptr< ::barc::laser_sensor const> laser_sensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::barc::laser_sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::barc::laser_sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace barc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'barc': ['/home/odroid/barc/workspace/src/barc/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::barc::laser_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::barc::laser_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::barc::laser_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::barc::laser_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barc::laser_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barc::laser_sensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::barc::laser_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4830f938e92590a48ff2cc9279d12cd";
  }

  static const char* value(const ::barc::laser_sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4830f938e92590aULL;
  static const uint64_t static_value2 = 0x48ff2cc9279d12cdULL;
};

template<class ContainerAllocator>
struct DataType< ::barc::laser_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "barc/laser_sensor";
  }

  static const char* value(const ::barc::laser_sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::barc::laser_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 XL\n\
float32 YL\n\
float32 XR\n\
float32 YR\n\
";
  }

  static const char* value(const ::barc::laser_sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::barc::laser_sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.XL);
      stream.next(m.YL);
      stream.next(m.XR);
      stream.next(m.YR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct laser_sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::barc::laser_sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::barc::laser_sensor_<ContainerAllocator>& v)
  {
    s << indent << "XL: ";
    Printer<float>::stream(s, indent + "  ", v.XL);
    s << indent << "YL: ";
    Printer<float>::stream(s, indent + "  ", v.YL);
    s << indent << "XR: ";
    Printer<float>::stream(s, indent + "  ", v.XR);
    s << indent << "YR: ";
    Printer<float>::stream(s, indent + "  ", v.YR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BARC_MESSAGE_LASER_SENSOR_H
